{"version":3,"sources":["components/Input.jsx","App.js","reportWebVitals.js","index.js"],"names":["Input","onChange","value","htmlElRef","useRef","current","focus","useFocus","inputRef","setInputFocus","useEffect","autoFocus","type","pattern","inputMode","ref","App","useState","setValue","className","e","target","num","toString","slice","calculateResult","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2JAwBeA,EAfD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC1B,EARgB,WAChB,IAAMC,EAAYC,iBAAO,MAGzB,MAAO,CAAED,EAFQ,WAAOA,EAAUE,SAAYF,EAAUE,QAAQC,UAM9BC,GAAlC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEG,OADHC,qBAAU,kBAAID,MAAgB,IAE5B,uBACCE,WAAS,EACTT,MAAOA,EACPU,KAAK,SACLX,SAAUA,EACVY,QAAQ,SAASC,UAAU,UAC3BC,IAAKP,KCWMQ,EA3BH,WACV,MAA0BC,qBAA1B,mBAAOf,EAAP,KAAcgB,EAAd,KAgBA,OACE,sBAAKC,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CAAOjB,MAAOA,EAAOD,SARJ,SAACmB,GACpB,IAAQlB,EAAUkB,EAAEC,OAAZnB,MACRgB,EAAShB,GAAS,IAAMA,EAAM,GAAKA,MAOjC,yCAlBoB,SAACoB,GACvB,GAAKA,KAAOA,GAAO,GAKnB,OADsB,QAAQA,GACTC,WAAWC,MAAM,EAAE,GAarCC,CAAgBvB,OCbRwB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0a4c8a81.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\n\nconst useFocus = () => {\n\tconst htmlElRef = useRef(null);\n\tconst setFocus = () => {htmlElRef.current &&  htmlElRef.current.focus()}\n\n\treturn [ htmlElRef, setFocus ] \n}\n\nconst Input = ({ onChange, value }) => {\n\tconst [inputRef, setInputFocus] = useFocus();\n\tuseEffect(()=>setInputFocus(),[]);\n    return (\n\t\t\t<input \n\t\t\t\tautoFocus\n\t\t\t\tvalue={value} \n\t\t\t\ttype='number' \n\t\t\t\tonChange={onChange} \n\t\t\t\tpattern=\"[0-9]*\" inputMode=\"numeric\"\n\t\t\t\tref={inputRef}\n\t\t\t/>\n    );\n}\n\nexport default Input;\n","import React, { useState } from 'react';\nimport Input from './components/Input';\n\nconst App = () => {\n  const [value, setValue] = useState();\n\n  const calculateResult = (num) => {\n    if (!num || num <= 0) {\n      return;\n    }\n    \n    const dividedResult = 235.215/num;\n    return dividedResult.toString().slice(0,5);\n  }\n  \n  const handleChange = (e) => {\n    const { value } = e.target;\n    setValue(value >= 100 ? value/10 : value);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Mpg to l/100km</h1>\n      <Input value={value} onChange={handleChange}/>\n      <h2>Result:</h2>\n      {calculateResult(value)}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport 'normalize.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}